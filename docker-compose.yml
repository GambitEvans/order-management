#version: '3.8'
#
#services:
#  postgres:
#    image: postgres:15
#    container_name: order_pg
#    restart: always
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_DB: orderdb
#    ports:
#      - "5432:5432"
#    volumes:
#      - pgdata:/var/lib/postgresql/data
#
#  jmeter:
#    build:
#      context: .
#      dockerfile: Dockerfile-jmeter
#    depends_on:
#      - order-management
#
#  redis:
#    image: redis:7
#    container_name: order_redis
#    ports:
#      - "6379:6379"
#
#  rabbitmq:
#    image: rabbitmq:3-management
#    container_name: rabbitmq-order
#    ports:
#      - "5672:5672"
#      - "15672:15672"
#    environment:
#      RABBITMQ_DEFAULT_USER: guest
#      RABBITMQ_DEFAULT_PASS: guest
#    healthcheck:
#      test: ["CMD", "rabbitmqctl", "status"]
#      interval: 5s
#      timeout: 10s
#      retries: 10
#
#  app:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    container_name: order_app
#    depends_on:
#      rabbitmq:
#        condition: service_healthy
#      postgres:
#        condition: service_started
#      redis:
#        condition: service_started
#    ports:
#      - "8080:8080"
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/orderdb
#      SPRING_DATASOURCE_USERNAME: postgres
#      SPRING_DATASOURCE_PASSWORD: postgres
#      SPRING_JPA_HIBERNATE_DDL_AUTO: update
#
#      SPRING_REDIS_HOST: redis
#      SPRING_REDIS_PORT: 6379
#
#      SPRING_RABBITMQ_HOST: rabbitmq
#      SPRING_RABBITMQ_PORT: 5672
#      SPRING_RABBITMQ_USERNAME: guest
#      SPRING_RABBITMQ_PASSWORD: guest
#
#volumes:
#  pgdata:
version: "3.8"
services:
  postgres:
    image: postgres:14
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    networks:
      - order-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d orderdb" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - order-net
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: order_redis
    ports:
      - "6379:6379"
    networks:
      - order-net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  order-management:
    build: .
    container_name: order-management
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/orderdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - order-net

  jmeter:
    build:
      context: .
      dockerfile: Dockerfile-jmeter
    container_name: jmeter
    depends_on:
      - order-management
    networks:
      - order-net

networks:
  order-net:
    driver: bridge